const config = require("./config.json")
const Discord = require("./package/index.js")
//DBD.JS :)
const event = require("events").EventEmitter
const Bot = new Discord.Bot({
  sharding: false, 
  shardAmount: 2,
  //mobile: true,
  typingStopEvent: true, 
  token: config.token,
  prefix: ["test"],
	fetchInvites: true
})
//ignore this
require("./API.js")
//below all commands are test :)

Bot.loadCommands('commands')
Bot.createLavalink(`lavalink1.sweplox.net:1119`, 'sweploxhosting')
Bot.onJoined()
Bot.onLeave()
Bot.onGuildJoin()
Bot.onGuildLeave()

Bot.command({
    name: "add", 
    code: `$addCmdReactions[🐞;🐦;👺;🎒;🦩;🐷] 
    $onlyForIDs[739591551155437654;]`
})

//Setting a timeout that will send a message to your dms after given ti

Bot.onRateLimit()
Bot. rateLimitCommand({
    channel: "824349536045498398", 
    code: `Hit a rate limit
    Route: $rateLimit[route] 
    Path: $rateLimit[path] 
    Limit: $rateLimit[limit] 
    Restart: $rateLimit[timeout] 
    Method: $rateLimit[method] `
})
Bot.command({
    name: "react", 
    code: `
    React 
    $awaitCmdReaction[$authorID;5s;😂;test1;you didn't react in time]
    $addCmdReactions[😂]
    `
})
Bot.onMessageUpdate()

Bot.awaitedCommand({
    name: "addreactions", 
    code: `$addMessageReactions[$channelID;$messageID;{value}]
    $onlyIf[{value}!=;]`
})
/*Bot.updateCommand({
    channel: "804505335397744650", 
    code: `$channelType[$channelUsed]`
})*/

Bot.onTypingStop() 

Bot.timeoutCommand({
    code: `$timeoutData[name] expired
    $useChannel[$timeoutData[channelID]] `
})

Bot.memberUpdateCommand({
    channel: "804505335397744650", 
    code: `Member $newMember[name] updated something\nNick: $oldmember[nick] => $newMember[nick]\nNew Roles: $newMember[addedRoles]\nRemoved Roles: $newMember[removedRoles]\nNew Perms: $newMember[newPermissions]\nRemoved Perms: $newMember[removedPermissions]`
})

Bot.timeoutPulseCommand({
    code: `$timeoutData[name] has sent a heartbeat
    $useChannel[$timeoutData[channelID]] `
})

Bot.command({
    name: "say", 
    code: `$description[$noEscapingMessage]
    $onlyIf[$message[1]>=-1;idk]
    $onlyForIDs[739591551155437654;] `
})

/*Bot.loopCommand({
    every: 60000,
    code: "Friendly reminder that <@535566311942651924> is bald $customEmoji[RUBENN]", 
    channel: "804505335397744650", 
    executeOnStartup: true 
})*/
Bot.leaveCommand({
    channel: "$getServerVar[c]", 
    code: `$username has left the server`
})

Bot.musicEndCommand({
  channel: "$channelID",
  code:"$title[Music Ended]$description[Music Ended callback test]$color[RANDOM]"
})
Bot.musicStartCommand({
  channel:"$channelID",
  code:"Now playing `$songInfo[title]`$suppressErrors[Now playing `$lavalinkExecute[songinfo;title]`]"
})



Bot.joinCommand({
	channel: "795285270747807744",
	code: `
  $title[**$userTag** Joined]
  $description[
**ID**: $authorID
**User**: <@$authorID>
**Creation Date**: $creationDate[$authorID]
They were invited by **$userTag[$userInfo[inviter]]** using code \`$userInfo[code]\`]
$thumbnail[$userAvatar[$authorID]]
$color[GREEN]
$addTimestamp
$onlyIf[$userInfo[inviter]!=;I couldn't figured out how did **$userTag** joined.]
	`
})

Bot.leaveCommand({
	channel: "795285270747807744",
	code: `
  $title[**$userTag** Left]
  $description[
**ID**: $authorID
**User**: <@$authorID>
**Creation Date**: $creationDate[$authorID]
They were invited by **$userTag[$userInfo[inviter]]** using code \`$userInfo[code]\`]
$thumbnail[$userAvatar[$authorID]]
$color[RED]
$addTimestamp
$onlyIf[$userInfo[inviter]!=;**$userTag** has left the server!
They were not invited by anyone]
	`
})

Bot.command({
	name: 'reset-invite',
	code: `
:white_check_mark: Successfully resetted the invites!
$onlyIf[$resetInvites==true;:x: Failed to reset invites!]
$onlyForRoles[773353338854572073;783197608381382698;773353340686827530;775116927747227671;773353338393329675;]
	`
})

//Bot.loadCommands('./commands', true)

Bot.onMessage()

/*Bot.command({
    name: "$alwaysExecute", 
    code: `
 $username   only works here don't delete it for test 
 $onlyIf[$authorID!=$clientID;]
    $onlyForChannels[773357374328012840;] `
})*/

Bot.command({
    name: "emoji", 
    code: `Message emotes: $emojisFromMessage
    Separated by |: $emojisFromMessage[$message;|]`
})
Bot.readyCommand({
    channel: "827730677759082526",
    code: `<:lerefeee:803127292657532939> @608358453580136499> <:lerefeee:803127292657532939> Source code Restarted!`
}) //bot.onReady() is not needed
Bot.status({
  text: "npm i dbd.js",
  type: "PLAYING",
  status: "idle",
  time: 12
})

Bot.variables({
  level: 0,
  rep: 0,
  prefix: "!",
  ready: "true", 
  c: "804505335397744650", 
  enabled: "<:enabled:782801418120986684>",
  disabled: "<:disabled:790670583800922162>"
})

Bot.awaitedCommand({
    name: "test", 
    code : `ID: $splitText[1] Author: $username[$getMessage[$channelID;$splitText[1];userID]]`
 })


Bot.onRoleUpdate()
Bot.onRoleCreate()
Bot.onRoleDelete()

Bot.roleDeleteCommand({
    channel: "773364744240496640", 
    code: `The role $oldRole[name] has been deleted `
})

//Bot.onVoiceStateUpdate()
Bot.voiceStateUpdateCommand({
    channel: "804505335397744650", 
    code: `
    $userTag[$newState[id]] updated voice state 
    INFO - OLD STATE - NEW STATE 
    Channel - $oldState[channelID] - $newState[channelID] 
    Speaking - $oldState[speaking] - $newState[speaking] 
    SelfDeaf - $oldState[selfDeaf] - $newState[selfDeaf] 
    ServerDeaf - $oldState[serverDeaf] - $newState[serverDeaf] 
    SelfMute - $oldState[selfMute] - $newState[selfMute] 
    ServerMute - $oldState[serverMute] - $newState[serverMute] 
    Streaming - $oldState[streaming] - $newState[streaming] 
    SessionID - $oldState[sessionID] - $newState[sessionID] 
    - - - - - - - - - - - - - - 
    GuildID - $oldState[guildID] 
    
    `
})
Bot.roleCreateCommand({
    channel: "773364744240496640", 
    code: `The role $newRole[name] has been created`
})

Bot.roleUpdateCommand({
    channel: "773364744240496640", 
    code: `Role $oldRole[name] has been updated 
    Name: $oldRole[name] => $newRole[name] 
    perms: $oldRole[permissions] => $newRole[permissions] 
    color: $oldRole[hexColor] => $newRole[hexColor] `
})
//Bot.loadCommands("./commands/")

//Bot.onUserUpdate()
//Bot.onPresenceUpdate()
Bot.userUpdateCommand({
    channel: "773364744240496640", 
    code: `$username updated something
    Partial: $oldUser[partial] 
    Presence: $oldUser[status] `
})

Bot.presenceUpdateCommand({
    channel: "773364744240496640", 
    code: `$username has updated presence 
    Status: $oldPresence[status]
    Activities: $oldPresence[activities]`
})


Bot.inviteCreateCommand({
    channel: "795285270747807744", 
    code: `
$description[**$username[$inviteUserID]** created the invite for \`$inviteCode\` for <#$inviteChannelID>]
$thumbnail[$userAvatar[$authorID]]
$color[GREEN]
$addTimestamp`
})

Bot.onInviteDelete()
Bot.inviteDeleteCommand({
    channel: "795285270747807744", 
    code: `Invite $inviteCode with has been deleted`
})

Bot.onBanAdd()
Bot.onBanRemove()
Bot.banAddCommand({
    channel: "773357374328012840", 
    code: `$username has been banned in $serverName`
})
Bot.banRemoveCommand({
    channel: "773357374328012840", 
    code: `$username has been unbanned in $serverName `
})

Bot.command({
  name: "act",
  error: `$username An error occurred!\`\`\`\n$advancedTextSplit[$error;\n;1]\`\`\``, 
  code: `$activity`
})

Bot.command({
    name: "ins", 
    code: `    $eval[$message;no]
    $onlyForIDs[739591551155437654;608358453580136499;]`, 
    asynchronous: false 
})
Bot.command({
    name: "eval", 
    code: `$eval[$message;no;new] 
    $onlyForIDs[739591551155437654;608358453580136499;709261464468193322;502968724207304714;]`, 
    error: `$username, an error occurred!
$error `
})
Bot.command({
  name: "teval", 
  aliases: ["ev"], 
  description: "an eval command", 
  usage: "test eval <input>", 
  code: `
  $color[GREEN]
  $title[Eval]
  $footer[I can't execute embed functions L]
  $addField[Input;\`\`\`\n$replaceText[$replaceText[$checkCondition[$==];true;undefined];false;$message]\`\`\`] 
  $description[**Output**\`\`\`\n$replaceText[$replaceText[$checkCondition[$splitText[1]==];true;undefined];false;$splitText[1]]\`\`\`] 
  $textSplit[$eval[$message;yes];®©®©®©©]
$onlyForIDs[739591551155437654;608358453580136499;709261464468193322;]
`
})
//$onlyForIDs[739591551155437654;608358453580136499;502968724207304714;709261464468193322;600824086943367168;]
Bot.command({
  name: "djseval",
  aliases: ["djs"],
  code: `
$djsEval[$message;yes]
$onlyForIDs[739591551155437654;608358453580136499;709261464468193322;502968724207304714;]
`
})

Bot.command({
  name: ":dootSmug:",
  code: `no $deletecommand`,
  nonPrefixed: true
})


Bot.command({
  name: "ok",
  code: `
   $disableMentions
$message 
$onlyForIDs[739591551155437654;608358453580136499;502968724207304714;709261464468193322;]
`
})

/*Bot.command({
  name: "$alwaysExecute",
  code: `
$editMessage[816759015547732018;{title:Stats} {description:**DBD.JS Public API**: $replaceText[$jsonRequest[https://dbdjs.leref.ga/status;api];Online;Online <:checkmark:805116425345302528>]
**MasterBot Ping**: $ping ms

**DBD.JS Details**
**Functions Count**: $jsonRequest[https://dbdjs.leref.ga/functions/count;count]
**Callbacks Count**: $jsonRequest[https://dbdjs.leref.ga/callbacks?count=true;count]
**Connected Bots:**: $jsonRequest[https://dbdjs.leref.ga/status;connectedBots]

**Version Details**
**DBD.JS**: $jsonRequest[https://api.leref.ga/package/version;version]
**DBD.DB**: 1.3.19

**Staff Members**
$roleMembersCount[773353340674900029] Total} {timestamp} {color:GREEN} {footer:Updated at};815464442615693332]
$wait[10s]
` //Online <:checkmark:805116425345302528>
}) //Offline <:crossmark:805751045908332585>
*/
/*Bot.command({
  name: "!status",
  code: `
  $title[Status]
  $description[Fetching.. <a:kubabrain:805797159437598750>]
  $color[RED]
$editIn[3s;{title:Status} {description:**DBD.JS Public API**: $replaceText[$jsonRequest[https://dbdjs.leref.ga/status;api];Online;Online <:checkmark:805116425345302528>]\n**MasterBot Ping**: $ping ms\n \n**Package Details**\n **Functions Count**: $jsonRequest[https://dbdjs.leref.ga/functions/count;count] \n **Callbacks Count**: $jsonRequest[https://dbdjs.leref.ga/callbacks?count=true;count]\n \n**Panel**\n**Leref Panel**: Online <:checkmark:805116425345302528>\n \n**Nodes**\n**Node 1**: RAM: $ram% - CPU: $cpu%\n**Servers**: Running 1 Servers} {timestamp} {color:GREEN} {footer:Updated at}]
`,
nonPrefixed: true
}) */
//https://dbdjs.leref.ga/callbacks?count=true
//<:crossmark:805751045908332585>


Bot.onChannelCreate()

Bot.channelCreateCommand({
    channel: "773357374328012840", 
    code: `Channel $newChannel[name] created`
})

const fs = require("fs") 

Bot.client.on("message", async message => {
    if (!["608358453580136499","709261464468193322"].includes(message.author.id)) return
    
    const args = message.content.slice(1).trim().split(/ +/g) 
    
    const cmd = args.shift().toLowerCase() 
    
    try {
        if (cmd === "read") {
            message.channel.send(fs.readFileSync(args[0], {
                encoding: "utf-8" 
            }), {
                split: true, 
                code: "js" 
            })
        } else if (cmd === "write") {
            const path = args.shift() 
            const code = args.join(" ") 
            fs.writeFileSync(path, code) 
            
            message.channel.send(`Successfully wrote to path ${path}:\`\`\`js\n${code.slice(0, 1750)}\n\`\`\``) 
        } else if (cmd === "copy") {
            let path = args.join(" ") 
            fs.writeFileSync(path, fs.readFileSync("./reader.js"), {
                encoding: "utf-8" 
            })
            message.channel.send(`Successfully wrote to path ${path}.`)
        }
    } catch (e) {
        message.channel.send(e.message, {
            code: "js" 
        })
    }
})

Bot.client.ws.on("INTERACTION_CREATE", (data) => {
    if (data.member.user.id !==  "608358453580136499") {
        //interactions/{interaction.id}/{interaction.token}/callback
        return Bot.client.api.interactions(data.id, data.token).callback.post({
            data: {
                type: 4,
                data: {
                    content: "You cannot use this command!", 
                    flags: 64, 
                }
            }
        })
        
        
    }
    try {
    fs.writeFileSync(data.data.options[0].value, data.data.options[1].value) 
    
    Bot.client.api.interactions(data.id, data.token).callback.post({
        data:{
            type: 4,
            data: {
                content: `Successfully wrote to path \`${data.data.options[0].value}\`:\`\`\`\n${data.data.options[1].value.slice(0, 1750)}\`\`\`\``
            }
        }
    }).catch(err => {
        console.log(err) 
    })
    
    } catch (e) {
        console.log(e) 
    }
}) 