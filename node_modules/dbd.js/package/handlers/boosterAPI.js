const { writeFileSync } = require("fs");
const axios = require("axios").default;
const p = require("../../package.json");
const parser = require("../functions/parser.js");

function boosterAPI(token) {
  const installationPath = __dirname.replace("\\handlers", "") + "\\functions";
  const packageJsonPath = __dirname.replace(
    "\\package\\handlers",
    "\\package.json"
  );
  try {
    axios
      .get("https://dbdjs.itzleref.repl.co/version", {
        headers: {
          Authorization: "Bearer " + token,
          "Content-Type": "application/json",
        },
      })
      .then((r) => {
        if (r.data.version !== p.installed_version) {
          axios
            .get(
              "https://dbdjs.itzleref.repl.co/install?version=" +
                r.data.version,
              {
                headers: {
                  Authorization: "Bearer " + token,
                  "Content-Type": "application/json",
                },
              }
            )
            .then(async (res) => {
              if (res.data.message) {
                return console.log(
                  "DBD.JS: RECEIVED ( " +
                    res.data.message +
                    " ) WHILE CONTACT API"
                );
              }
              if (!res.data.data.length) return;
              console.log("DBD.JS: INSTALLING " + res.data.version);
              const startIntall = Date.now();
              for (const fu of res.data.data) {
                console.log(
                  "DBD.JS: WRITING " + fu + ".js IN package/functions/funcs"
                );
                const start = Date.now();
                try {
                  const resp = await axios.get(
                    "https://dbdjs.itzleref.repl.co/function?name=" + fu,
                    {
                      headers: {
                        Authorization: "Bearer " + token,
                        "Content-Type": "application/json",
                      },
                    }
                  );

                  if (resp.data.data) {
                    writeFileSync(
                      installationPath + "\\funcs\\" + fu + ".js",
                      resp.data.data
                    );
                    console.log(
                      "FINISHED WRITE " +
                        fu +
                        ".js (" +
                        (Date.now() - start) +
                        "ms)"
                    );
                    parser["$" + fu] = "INSTALLED WITH API";
                  }
                } catch (error) {
                  console.log(
                    "DBD.JS: FAILED WRITE " +
                      fu +
                      ".js ( " +
                      error.response.status +
                      " code )"
                  );
                }
              }

              console.log(
                "DBD.JS: UPDATE FINISH " +
                  res.data.version +
                  " ( " +
                  (Date.now() - startIntall) +
                  "ms )"
              );
              writeFileSync(
                installationPath + "\\parser.js",
                `const Parser = ${JSON.stringify(
                  parser
                )}\nmodule.exports = Parser`
              );
              p.installed_version = res.data.version;
              writeFileSync(
                packageJsonPath,
                JSON.stringify(p)
                  .split(",")
                  .join(",\n ")
                  .split("{")
                  .join("{\n ")
                  .split("}")
                  .join("\n} ")
                  .split("[")
                  .join("[\n ")
                  .split("]")
                  .join("\n] ")
              );
            });
        } else {
          console.log("DBD.JS: CONFIRMED LATEST " + r.data.version);
        }
      });
  } catch (err) {
    console.log(
      "DBD.JS: Something happened when contacting API ( " +
        err.response.status +
        " code )"
    );
  }
}

module.exports = boosterAPI;
